const express = require('express');
const mongoose = require('mongoose');
const connect = require('./Components/connection');

const app = express();

async function startServer() {
    try {
        // Ensure connection is established before proceeding
        await connect();

        const dataSchema = new mongoose.Schema({
            name: { type: String, required: true },
            email: { type: String, required: true },
            password: { type: String, required: true }
        }, {
            versionKey: false // Disable `__v` field
        });

        const User = mongoose.model('Dtatbase-for-tutorial', dataSchema, 'std');

        // Add express middleware
        app.use(express.json());

        // Add routes
        app.get('/users', async (req, res) => {
            try {
                const users = await User.find({}, { password: 0 }); // Exclude password field
                console.log('Users fetched successfully:');
                console.log(JSON.stringify(users, null, 2)); // Pretty print the users
                res.json(users);
            } catch (error) {
                console.error('Error fetching users:', error);
                res.status(500).json({ message: 'Error fetching users', error: error.message });
            }
        });

        // Add a route to get a single user by email
        app.get('/user/:email', async (req, res) => {
            try {
                const user = await User.findOne({ email: req.params.email }, { password: 0 });
                if (user) {
                    console.log('User fetched successfully:');
                    console.log(JSON.stringify(user, null, 2));
                    res.json(user);
                } else {
                    res.status(404).json({ message: 'User not found' });
                }
            } catch (error) {
                console.error('Error fetching user:', error);
                res.status(500).json({ message: 'Error fetching user', error: error.message });
            }
        });

        // Start the express server
        const PORT = process.env.PORT || 5000;
        app.listen(PORT, () => {
            console.log(`Server running on port ${PORT}`);
        });
    } catch (error) {
        console.error('Error starting server:', error);
    }
}

startServer(); // Call the async function to start the server